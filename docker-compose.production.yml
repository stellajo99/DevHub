# Docker Compose configuration for DevHub production environment
version: '3.8'

services:
  # Production Database
  db:
    image: mongo:6.0
    container_name: devhub-prod-db
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: devhub_prod
    ports:
      - "27017:27017"
    volumes:
      - prod_db_data:/data/db
      - ./backups:/backups
    networks:
      - prod-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Production Redis
  redis:
    image: redis:7-alpine
    container_name: devhub-prod-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - prod_redis_data:/data
    networks:
      - prod-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # Production Application
  app:
    build:
      context: .
      dockerfile: Dockerfile.production
      args:
        NODE_ENV: production
        APP_VERSION: ${APP_VERSION}
        BUILD_DATE: ${BUILD_DATE}
        VCS_REF: ${VCS_REF}
    container_name: devhub-prod-app
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      NODE_ENV: production
      PORT: 5000
      MONGODB_URI: ${MONGODB_URI}
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: 24h
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000}
      LOG_LEVEL: warn
      RATE_LIMIT_WINDOW: 900000
      RATE_LIMIT_MAX: 1000
      TRUST_PROXY: "true"
    ports:
      - "5000:5000"
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
      - frontend-build:/app/frontend/build
    networks:
      - prod-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Production monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: devhub-prod-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/rules:/etc/prometheus/rules:ro
      - prod_prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - prod-network
    depends_on:
      - app
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Production monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: devhub-prod-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_SECURITY_DISABLE_GRAVATAR: "true"
      GF_ANALYTICS_REPORTING_ENABLED: "false"
      GF_ANALYTICS_CHECK_FOR_UPDATES: "false"
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    volumes:
      - prod_grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - prod-network
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: devhub-node-exporter
    restart: unless-stopped
    ports:
      - "9101:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - prod-network
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'

  # Alertmanager for alerts
  alertmanager:
    image: prom/alertmanager:latest
    container_name: devhub-alertmanager
    restart: unless-stopped
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - prod_alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    networks:
      - prod-network
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'

  # Nginx reverse proxy for frontend and API
  nginx:
    image: nginx:alpine
    container_name: devhub-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "3000:3000"
    volumes:
      - ./nginx.production.conf:/etc/nginx/nginx.conf:ro
      - ./logs:/var/log/nginx
      - frontend-build:/usr/share/nginx/html
    networks:
      - prod-network
    depends_on:
      - app
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'

networks:
  prod-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16

volumes:
  prod_db_data:
    driver: local
  prod_redis_data:
    driver: local
  prod_prometheus_data:
    driver: local
  prod_grafana_data:
    driver: local
  prod_alertmanager_data:
    driver: local
  frontend-build:
    driver: local